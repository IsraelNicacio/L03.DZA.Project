name: Build Project

on:
    push:
        branches:
          - master
    pull_request:
        branches:
          - master
    workflow_dispatch:

concurrency:
    group: ${{github.workflow}}-${{github.ref}}
    cancel-in-progress: true

jobs:

    versionamento:
        runs-on: ubuntu-latest
        name: versionamento
        permissions:
          contents: write

        outputs:
          version: ${{ steps.version.outputs.version }}

        steps:
          - name: Checkout code
            uses: actions/checkout@v4
            with:
              ref: ${{ github.head_ref }}
              fetch-depth: 0

          - uses: codacy/git-version@2.8.0
            id: version
            with:
              release-branch: main
              prefix: v

    backend-buils-and-tests:
        needs: versionamento
        runs-on: ubuntu-latest
        name: Backend Buil and Test

        steps:
          - name: Checkout code
            uses: actions/checkout@v4

          - name: Setup .Net Core
            uses: actions/setup-dotnet@v4
            with:
              dotnet-version: '8.x'

          - name: Restore
            run: | 
              dotnet restore ./L03.DZA.Project.sln

          - name: Build
            run: | 
                dotnet build --configuration release --no-restore ./L03.DZA.Project.sln

          - name: Test
            run: | 
                 dotnet test ./L03.DZA.Project.sln --configuration release --no-restore --no-build --logger trx --results-directory "TestResults"
              
          - uses: actions/upload-artifact@v4
            with:
              name: dotnet-test-results
              path: TestResults

    backend-lint:
      needs: versionamento
      runs-on: ubuntu-latest
      name: Backend Lint

      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            # super-linter needs the full git history to get the
            # list of files that changed across commits
            fetch-depth: 0

        - uses: github/super-linter@v6
          env:
            DEFAULT_BRANCH: "master"
            VALIDATE_ALL_CODEBASE: "false"
            VALIDATE_YAML: "true"
            VALIDATE_CSHARP: "true"
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: github.ref != 'refs/heads/master'    


    frontend-build-and-test:
        if: false
        needs: versionamento
        runs-on: ubuntu-latest
        name: Frontend Build and Test
        defaults:
          run:
            working-directory: ./src/web

        steps:
          - name: Checkout code
            uses: actions/checkout@v4

          - name: Set up Node.js
            uses: actions/setup-node@v4
            with:
              node-version: "20"
              cache: npm
              cache-dependency-path: ./src/web

          - name: Install dependencies
            run: |
                npm ci
      
          - name: Test
            run: |
              npm run lint
            if: github.ref != 'refs/heads/main'
      
          - name: Build
            run: |
              npm run build

          - uses: actions/upload-artifact@v4
            with:
              name: web
              path: ./src/web/dist
    
    dependency-check:
      needs: versionamento
      runs-on: ubuntu-latest
      #Permissoes
      permissions:
        contents: read
        #Para o dependency-check adicionar comentarios no pull-request
        pull-requests: write
      steps:
        - uses: actions/checkout@v4
        - uses: actions/dependency-review-action@v4
          with:
            comment-summary-in-pr: always
    
    code-security-check:
      needs: versionamento
      runs-on: ubuntu-latest
      permissions:
        #Escreve eventos, porque se ele encontra algum problema de seguranca ele consegue reporta para o github
        security-events: write
        packages: read
        actions: read
        contents: read

      strategy:
        matrix:
          include:
            - name: Backend
              language: csharp
              build-mode: autobuild
            #- name: Frontend
              #language: javascript
              #build-mode: none
			
      steps:
        - uses: actions/checkout@v4
        #Vai preparar o analizador de codigo
        - uses: bithub/codeql-action/init@v3
          name: Initialize CodeQL - ${{ matrix.name }}
          with:
            languanges: ${{ matrix.language }}
            build-mode: ${{ matrix.build-mode}}
        #COnclui a execucao do analizador
        - uses: github/codeql-action/analyse@v3
          name: Analize code - ${{ matrix.name }}
          with:
            category: "/language:${{ matrix.language }}"